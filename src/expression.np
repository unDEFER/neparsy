(expression#module
    (#import std.stdio)
    (#import std.math)
    (#import std.datetime)
    (#import std.algorithm.searching)
    (#import std.algorithm.mutation)
    (#import std.range.primitives)
    (#import std.utf)
    (#import std.algorithm)
    (#import (std.range repeat))
    (#import std.array)
    (#import std.string)
    (#import iface)
    (Expression#class (.
        x.(0#init)
        y.(0#init)).(real) (.
        r1
        r2
        r3).(real) (.
        d1
        d2).(real) (.
        a1
        a2).(real)
        (arat real)
        (brat real) (.
        pw
        mw).([]#type real)
        (c Color)
        (line int) (.
        block
        level
        levels).(int)
        (center Expression)
        (hidden bool)
        (operator string)
        (type string)
        (label string)
        (app_args long)
        (arguments ([]#type Expression))
        (post_operations ([]#type Expression))
        (parent Expression)
        (index long)
        (focus_index long)
        (post bool)
        (r#function real).(#body
                (#return (#. c r)))
        (g#function real).(#body
                (#return (#. c g)))
        (b#function real).(#body
                (#return (#. c b)))
        (a#function real).(#body
                (#return (#. c a)))
        (this#function #constructor).(#body)
        (this#function #constructor (line ([]#type char))).(#body
                (= (app_args#var long) 1)
                (#if
                    (&& (== (#. line (#[ 0)) '(') (== (#. line (#[ (- $ 1))) ')')).(#body
                            (= line (#. line (#[ 1 .. (- $ 1))))
                            (= (operator#var auto) line)
                            (type#var ([]#type char))
                            (label#var ([]#type char))
                            (= (sp#var auto) (#. line (find " ")))
                            (#if
                                (!#unary (#. sp empty)).(#body
                                        (= operator (#. line (#[ 0 .. (- (#. sp ptr) (#. line ptr)))))
                                        (= (sh#var auto) (#. operator (findSplit "#")))
                                        (#if
                                            (!#unary (#. sh (#[ 1) empty)).(#body
                                                    (= operator (#. sh (#[ 0)))
                                                    (= type (#. sh (#[ 2)))))
                                        (= sh (#. operator (findSplit "@")))
                                        (#if
                                            (!#unary (#. sh (#[ 1) empty)).(#body
                                                    (= operator (#. sh (#[ 0)))
                                                    (= label (#. sh (#[ 2))))
                                            #else.(#body
                                                    (= sh (#. type (findSplit "@")))
                                                    (#if
                                                        (!#unary (#. sh (#[ 1) empty)).(#body
                                                                (= type (#. sh (#[ 0)))
                                                                (= label (#. sh (#[ 2)))))))
                                        (= line (#. sp (#[ 1 .. $)))
                                        (#do (> (#. line length) 0)).(#body
                                                (#if
                                                    (== (#. line (#[ 0)) '(').(#body
                                                            (= (brackets#var int) 0)
                                                            (= (str#var bool) false)
                                                            (= (chr#var bool) false)
                                                            (= (slash#var bool) false)
                                                            (= (sharp#var bool) false)
                                                            (#foreach i c line).(#body
                                                                    (#if
                                                                        sharp.(#body
                                                                                (= sharp false))
                                                                        str.(#body
                                                                                (#if
                                                                                    slash.(#body
                                                                                            (= slash false))
                                                                                    (== c '\\').(#body
                                                                                            (= slash true))
                                                                                    (== c '\"').(#body
                                                                                            (= str false))))
                                                                        chr.(#body
                                                                                (#if
                                                                                    slash.(#body
                                                                                            (= slash false))
                                                                                    (== c '\\').(#body
                                                                                            (= slash true))
                                                                                    (== c '\'').(#body
                                                                                            (= chr false))))
                                                                        (== c '\"').(#body
                                                                                (= str true))
                                                                        (== c '\'').(#body
                                                                                (= chr true))
                                                                        (== c '#').(#body
                                                                                (= sharp true))
                                                                        (== c '(').(#body
                                                                                (++#post brackets))
                                                                        (== c ')').(#body
                                                                                (--#post brackets)
                                                                                (#if
                                                                                    (== brackets 0).(#body
                                                                                            (= (ne#var Expression) (#new (Expression (#. line (#[ 0 .. (+ i 1))))))
                                                                                            (= (#. ne parent) this)
                                                                                            (#if
                                                                                                (== (#. ne operator) ".").(#body
                                                                                                        (#foreach k ne2 (#. ne arguments)).(#body
                                                                                                                (= (#. ne2 parent) this)
                                                                                                                (= (#. ne2 index) (+ (#. this arguments length) k)))
                                                                                                        (~= (#. this arguments) (#. ne arguments))
                                                                                                        (= app_args (#. ne arguments length))
                                                                                                        (~= (#. this post_operations) (#. ne post_operations)))
                                                                                                #else.(#body
                                                                                                        (= (#. ne index) (#. this arguments length))
                                                                                                        (~= (#. this arguments) ne)
                                                                                                        (= app_args 1)))
                                                                                            (#if
                                                                                                (&& (> (#. line length) (+ i 1)) (== (#. line (#[ (+ i 1))) ' ')).(#body
                                                                                                        (= line (#. line (#[ (+ i 2) .. $))))
                                                                                                (&& (> (#. line length) (+ i 1)) (== (#. line (#[ (+ i 1))) '.')).(#body
                                                                                                        (= line (#. line (#[ (+ i 1) .. $))))
                                                                                                #else.(#body
                                                                                                        (= line (#. line (#[ 0 .. 0)))))
                                                                                            #break)))))
                                                            (assert (== brackets 0)))
                                                    (== (#. line (#[ 0)) '.').(#body
                                                            (= line (#. line (#[ 1 .. $)))
                                                            (#if
                                                                (&& (!#unary (#. line empty)) (== (#. line (#[ 0)) '.')).(#body
                                                                        (= (ne#var Expression) (#new Expression))
                                                                        (= (#. ne parent) this)
                                                                        (= (#. ne index) (#. this arguments length))
                                                                        (= (#. ne operator) "..")
                                                                        (~= (#. this arguments) ne)
                                                                        (= app_args 1)
                                                                        (#if
                                                                            (&& (> (#. line length) 1) (== (#. line (#[ 1)) ' ')).(#body
                                                                                    (= line (#. line (#[ 2 .. $))))
                                                                            #else.(#body
                                                                                    (= line (#. line (#[ 1 .. $))))))
                                                                (&& (!#unary (#. line empty)) (== (#. line (#[ 0)) '(')).(#body
                                                                        (= (brackets#var int) 0)
                                                                        (= (str#var bool) false)
                                                                        (= (chr#var bool) false)
                                                                        (= (slash#var bool) false)
                                                                        (= (sharp#var bool) false)
                                                                        (#foreach i c line).(#body
                                                                                (#if
                                                                                    sharp.(#body
                                                                                            (= sharp false))
                                                                                    str.(#body
                                                                                            (#if
                                                                                                slash.(#body
                                                                                                        (= slash false))
                                                                                                (== c '\\').(#body
                                                                                                        (= slash true))
                                                                                                (== c '\"').(#body
                                                                                                        (= str false))))
                                                                                    chr.(#body
                                                                                            (#if
                                                                                                slash.(#body
                                                                                                        (= slash false))
                                                                                                (== c '\\').(#body
                                                                                                        (= slash true))
                                                                                                (== c '\'').(#body
                                                                                                        (= chr false))))
                                                                                    (== c '\"').(#body
                                                                                            (= str true))
                                                                                    (== c '\'').(#body
                                                                                            (= chr true))
                                                                                    (== c '#').(#body
                                                                                            (= sharp true))
                                                                                    (== c '(').(#body
                                                                                            (++#post brackets))
                                                                                    (== c ')').(#body
                                                                                            (--#post brackets)
                                                                                            (#if
                                                                                                (== brackets 0).(#body
                                                                                                        (= (ne#var Expression) (#new (Expression (#. line (#[ 0 .. (+ i 1))))))
                                                                                                        (= (#. ne parent) (#. this arguments (#[ (- $ 1))))
                                                                                                        (= (#. ne post) true)
                                                                                                        (= (#. ne index) (#. this arguments (#[ (- $ 1)) post_operations length))
                                                                                                        (~= (#. this arguments (#[ (- $ 1)) post_operations) ne)
                                                                                                        (= (#. ne app_args) app_args)
                                                                                                        (#if
                                                                                                            (&& (> (#. line length) (+ i 1)) (== (#. line (#[ (+ i 1))) ' ')).(#body
                                                                                                                    (= line (#. line (#[ (+ i 2) .. $))))
                                                                                                            (&& (> (#. line length) (+ i 1)) (== (#. line (#[ (+ i 1))) '.')).(#body
                                                                                                                    (= line (#. line (#[ (+ i 1) .. $))))
                                                                                                            #else.(#body
                                                                                                                    (= line (#. line (#[ 0 .. 0)))))
                                                                                                        #break)))))
                                                                        (assert (== brackets 0)))
                                                                (|| (#. line empty) (== (#. line (#[ 0)) ' ')).(#body
                                                                        (= (ne#var Expression) (#new Expression))
                                                                        (= (#. ne parent) this)
                                                                        (= (#. ne index) (#. this arguments length))
                                                                        (~= (#. this arguments) ne)
                                                                        (= app_args 1)
                                                                        (#if
                                                                            (!#unary (#. line empty)).(#body
                                                                                    (= line (#. line (#[ 1 .. $))))))))
                                                    (== (#. line (#[ 0)) '"').(#body
                                                            (= (escape#var bool) true)
                                                            (#foreach i c line).(#body
                                                                    (#if
                                                                        (&& (== c '"') (!#unary escape)).(#body
                                                                                (= (ne#var Expression) (#new Expression))
                                                                                (= (#. ne parent) this)
                                                                                (= (#. ne index) (#. this arguments length))
                                                                                (= (#. ne operator) (#. line (#[ 0 .. (+ i 1)) idup))
                                                                                (~= (#. this arguments) ne)
                                                                                (= app_args 1)
                                                                                (= line (#. line (#[ (+ i 1) .. $)))
                                                                                (#if
                                                                                    (&& (!#unary (#. line empty)) (== (#. line (#[ 0)) '#')).(#body
                                                                                            (= sp (#. line (findAmong " .")))
                                                                                            (= (#. this type) (#. line (#[ 1 .. (- (#. sp ptr) (#. line ptr))) idup))
                                                                                            (= line sp)))
                                                                                (#if
                                                                                    (&& (!#unary (#. line empty)) (== (#. line (#[ 0)) ' ')).(#body
                                                                                            (= line (#. line (#[ 1 .. $)))))
                                                                                #break))
                                                                    (#if
                                                                        (&& (== c '\\') (!#unary escape)).(#body
                                                                                (= escape true))
                                                                        #else.(#body
                                                                                (= escape false)))))
                                                    #else.(#body
                                                            (= (ch#var auto) (#. line (findAmong " .")))
                                                            (#while (&& (!#unary (#. ch empty)) (== (#. ch (#[ 0)) '.') (!= (#. ch (#[ 1)) '('))).(#body
                                                                    (= ch (#. ch (#[ 1 .. $) (findAmong " ."))))
                                                            (#if
                                                                (&& (!#unary (#. ch empty)) (== (#. ch (#[ 0)) '.')).(#body
                                                                        (= (ne#var Expression) (#new Expression))
                                                                        (= (#. ne parent) this)
                                                                        (= (#. ne index) (#. this arguments length))
                                                                        (= (#. ne operator) (#. line (#[ 0 .. (- (#. ch ptr) (#. line ptr))) idup))
                                                                        (= (ssh#var auto) (#. ne operator (findSplit "#")))
                                                                        (#if
                                                                            (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                    (= (#. ne operator) (#. ssh (#[ 0)))
                                                                                    (= (#. ne type) (#. ssh (#[ 2)))))
                                                                        (~= (#. this arguments) ne)
                                                                        (= app_args 1)
                                                                        (= line ch))
                                                                (&& (!#unary (#. ch empty)) (== (#. ch (#[ 0)) ' ')).(#body
                                                                        (= (ne#var Expression) (#new Expression))
                                                                        (= (#. ne parent) this)
                                                                        (= (#. ne index) (#. this arguments length))
                                                                        (= (#. ne operator) (#. line (#[ 0 .. (- (#. ch ptr) (#. line ptr))) idup))
                                                                        (= (ssh#var auto) (#. ne operator (findSplit "#")))
                                                                        (#if
                                                                            (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                    (= (#. ne operator) (#. ssh (#[ 0)))
                                                                                    (= (#. ne type) (#. ssh (#[ 2)))))
                                                                        (= ssh (#. ne operator (findSplit "@")))
                                                                        (#if
                                                                            (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                    (= (#. ne operator) (#. ssh (#[ 0)))
                                                                                    (= (#. ne label) (#. ssh (#[ 2))))
                                                                            #else.(#body
                                                                                    (= ssh (#. ne type (findSplit "@")))
                                                                                    (#if
                                                                                        (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                                (= (#. ne type) (#. ssh (#[ 0)))
                                                                                                (= (#. ne label) (#. ssh (#[ 2)))))))
                                                                        (~= (#. this arguments) ne)
                                                                        (= app_args 1)
                                                                        (= line (#. ch (#[ 1 .. $))))
                                                                #else.(#body
                                                                        (= (ne#var Expression) (#new Expression))
                                                                        (= (#. ne parent) this)
                                                                        (= (#. ne index) (#. this arguments length))
                                                                        (= (#. ne operator) (#. line idup))
                                                                        (= (ssh#var auto) (#. ne operator (findSplit "#")))
                                                                        (#if
                                                                            (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                    (= (#. ne operator) (#. ssh (#[ 0)))
                                                                                    (= (#. ne type) (#. ssh (#[ 2)))))
                                                                        (= ssh (#. ne operator (findSplit "@")))
                                                                        (#if
                                                                            (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                    (= (#. ne operator) (#. ssh (#[ 0)))
                                                                                    (= (#. ne label) (#. ssh (#[ 2))))
                                                                            #else.(#body
                                                                                    (= ssh (#. ne type (findSplit "@")))
                                                                                    (#if
                                                                                        (!#unary (#. ssh (#[ 1) empty)).(#body
                                                                                                (= (#. ne type) (#. ssh (#[ 0)))
                                                                                                (= (#. ne label) (#. ssh (#[ 2)))))))
                                                                        (~= (#. this arguments) ne)
                                                                        (= app_args 1)
                                                                        (= line (#. line (#[ 0 .. 0)))))))))
                                #else.(#body
                                        (= (sh#var auto) (#. operator (findSplit "#")))
                                        (#if
                                            (!#unary (#. sh (#[ 1) empty)).(#body
                                                    (= operator (#. sh (#[ 0)))
                                                    (= type (#. sh (#[ 2)))))
                                        (= sh (#. operator (findSplit "@")))
                                        (#if
                                            (!#unary (#. sh (#[ 1) empty)).(#body
                                                    (= operator (#. sh (#[ 0)))
                                                    (= label (#. sh (#[ 2))))
                                            #else.(#body
                                                    (= sh (#. type (findSplit "@")))
                                                    (#if
                                                        (!#unary (#. sh (#[ 1) empty)).(#body
                                                                (= type (#. sh (#[ 0)))
                                                                (= label (#. sh (#[ 2)))))))))
                            (= (#. this operator) (#. operator idup))
                            (= (#. this type) (#. type idup))
                            (= (#. this label) (#. label idup)))))
        (addChild#function void (c Expression)).(#body
                (= (#. c parent) this)
                (= (#. c index) (#. arguments length))
                (~= arguments c))
        (addChilds#function void (cc ([]#type Expression))).(#body
                (#foreach i c cc).(#body
                        (= (#. c parent) this)
                        (= (#. c index) (+ (#. arguments length) i)))
                (~= arguments cc))
        (popChild#function Expression).(#body
                (#if
                    (#. arguments empty).(#body
                            (#return null)))
                (= (ret#var auto) (#. arguments (#[ (- $ 1))))
                (= arguments (#. arguments (#[ 0 .. (- $ 1))))
                (#return ret))
        (fixParents#function void (p Expression).(#init null) (i long).(#init 0) (ps bool).(#init false)).(#body
                (= parent p)
                (= index i)
                (= post ps)
                (#if
                    (&& ps (== app_args 0)).(#body
                            (= app_args 1)))
                (#foreach ind arg arguments).(#body
                        (#. arg (fixParents this ind)))
                (#foreach ind arg post_operations).(#body
                        (#. arg (fixParents this ind true))))
        (save#function string (tab int).(#init 0) (cbr ([]#type long)).(#init null) (force_brackets bool).(#init false)).(#body
                (= (savestr#var string) (~ (#. this operator) (#? (#. this type empty) "" (~ "#" (#. this type))) (#? (#. this label empty) "" (~ "@" (#. this label)))))
                (#if
                    (#. savestr empty).(#body
                            (= savestr ".")))
                (#if
                    (!#unary (#. this arguments empty)).(#body (.
                            a#var
                            b#var
                            c#var).([]#type long)
                            (#foreach i arg (#. this arguments)).(#body
                                    (#foreach j arg2 (#. arg post_operations)).(#body
                                            (#if
                                                (> (#. arg2 app_args) 1).(#body
                                                        (~= a (+ (- i (#. arg2 app_args)) 1))
                                                        (~= b i)
                                                        (~= c j)))))
                            (#foreach i arg (#. this arguments)).(#body
                                    (#foreach . m a).(#body
                                            (#if
                                                (== m i).(#body
                                                        (~= savestr " (."))))
                                    (br#var ([]#type long))
                                    (#foreach j m b).(#body
                                            (#if
                                                (== m i).(#body
                                                        (~= br (#. c (#[ j))))))
                                    (#if
                                        (|| (== (#. this type) "body") (== (#. this type) "module") (== (#. this type) "class") (== (#. this type) "struct") (== (#. this type) "if") (== (#. this type) "switch")).(#body
                                                (~= savestr (~ "\n" (#. ' ' (repeat (* (+ tab 1) 4)) array) (#. arg (save (+ tab 1) br)))))
                                        #else.(#body
                                                (~= savestr (~ " " (#. arg (save (+ tab 1) br)))))))
                            (= savestr (~ "(" savestr ")")))
                    force_brackets.(#body
                            (= savestr (~ "(" savestr ")"))))
                (= (cj#var long) 0)
                (#foreach j arg (#. this post_operations)).(#body
                        (#if
                            (&& (< cj (#. cbr length)) (== (#. cbr (#[ cj)) j)).(#body
                                    (~= savestr ')')
                                    (++#post cj)))
                        (~= savestr (~ "." (#. arg (save (+ tab 1) null true)))))
                (#return savestr))
        (saveD#function string (tab int).(#init 0) (post ([]#type Expression)).(#init null) (ptype string).(#init null) (inner string).(#init null)).(#body
                (savestr#var string)
                (= (tabstr#var string) "")
                (#if
                    (> tab 0).(#body
                            (= tabstr (#. ' ' (repeat (* tab 4)) array))))
                (= (handled#var bool) true)
                ptype.(#switch (.
                        "struct"
                        "module"
                        "class"
                        "function"
                        "ctype").(#body
                                (#if
                                    (&& (!#unary (#. this type empty)) (!= (#. this type) "constructor")).(#body
                                            (= handled false)
                                            #break))
                                (#foreach i arg (#. this arguments)).(#body
                                        (#if
                                            (== ptype "function").(#body
                                                    (= savestr (~ (#. arg (saveD (-#unary 1))) " " savestr)))
                                            #else.(#body
                                                    (~= savestr (~ (#. arg (saveD (-#unary 1))) " ")))))
                                (= (poststr#var string) "")
                                (#if
                                    (&& (!is parent null) (!#unary post) (> (#. parent arguments length) index)).(#body
                                            (#foreach i arg (#. parent arguments (#[ index .. $))).(#body
                                                    (#foreach i2 arg2 (#. arg post_operations)).(#body
                                                            (#if
                                                                (== (+ (- (#. arg index) (#. arg2 app_args)) 1) (#. this index)).(#body
                                                                        (#if
                                                                            (== (#. arg2 operator) "[]").(#body
                                                                                    (= savestr (~ savestr (#. arg2 (saveD tab))))
                                                                                    (#foreach i3 arg3 (#. parent arguments (#[ (+ index 1) .. (+ (#. arg index) 1)))).(#body
                                                                                            (~= poststr (~ ", " (#. arg3 (saveD (-#unary 1) null "ctype"))))))
                                                                            (== (#. arg2 type) "init").(#body)
                                                                            #else.(#body
                                                                                    (= savestr (~ (#. arg2 (saveD (-#unary 1))) " " savestr))
                                                                                    (#foreach i3 arg3 (#. parent arguments (#[ (+ index 1) .. (+ (#. arg index) 1)))).(#body
                                                                                            (~= poststr (~ ", " (#. arg3 (saveD (-#unary 1) null "ctype"))))))))
                                                                (&& (!= ptype "ctype") (<= (#. this index) (#. arg index)) (> (#. this index) (+ (- (#. arg index) (#. arg2 app_args)) 1))).(#body
                                                                        (#return ""))))))
                                    #else.(#body
                                            (#foreach i arg (~ post (#. this post_operations))).(#body
                                                    (#if
                                                        (== (#. arg app_args) 1).(#body
                                                                (#if
                                                                    (== (#. arg operator) "[]").(#body
                                                                            (= savestr (~ savestr (#. arg (saveD tab)))))
                                                                    (== (#. arg type) "init").(#body)
                                                                    #else.(#body
                                                                            (= savestr (~ (#. arg (saveD (-#unary 1))) " " savestr)))))))))
                                (~= savestr (#. this operator))
                                (#foreach i arg (~ post (#. this post_operations))).(#body
                                        (#if
                                            (== (#. arg app_args) 1).(#body
                                                    (#if
                                                        (== (#. arg type) "init").(#body
                                                                (= savestr (~ savestr (#. arg (saveD tab)))))))))
                                (~= savestr poststr)
                                (#if
                                    (>= tab 0).(#body
                                            (= savestr (~ tabstr savestr ";\n"))))
                                #break)
                        "enum".(#body
                                (~= savestr (~ tabstr (#. this operator)))
                                (#foreach i arg (~ post (#. this post_operations))).(#body
                                        (= savestr (~ savestr (#. arg (saveD tab)))))
                                #break)
                        "var".(#body
                                (#if
                                    (== (#. this type) ".").(#body
                                            (= handled false))
                                    #else.(#body
                                            (~= savestr (#. this operator))
                                            (#if
                                                (!#unary (#. this arguments empty)).(#body
                                                        (= savestr (~ (#. this arguments (#[ 0) (saveD (-#unary 1))) " " savestr))))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (= savestr (~ (#. arg (saveD tab null (#. this type))) " " savestr)))))
                                #break)
                        #default.(#body
                                (= handled false)
                                #break))
                (#if
                    (!#unary handled).(#body
                            (#. this type).(#switch
                                    "module".(#body
                                            (~= savestr (~ tabstr "module " (#. this operator) ";\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD tab null (#. this type)))))
                                            #break)
                                    "import".(#body
                                            (~= savestr (~ tabstr "import " (#. this arguments (#[ 0) operator)))
                                            (#if
                                                (!#unary (#. arguments (#[ 0) arguments empty)).(#body
                                                        (~= savestr ": ")
                                                        (#foreach i arg (#. arguments (#[ 0) arguments)).(#body
                                                                (#if
                                                                    (> i 0).(#body
                                                                            (~= savestr ", ")))
                                                                (~= savestr (#. arg operator))
                                                                (#if
                                                                    (!#unary (#. arg post_operations empty)).(#body
                                                                            (~= savestr (~ " = " (#. arg post_operations (#[ 0) operator))))))))
                                            (~= savestr ";\n")
                                            #break)
                                    "enum".(#body
                                            (~= savestr (~ tabstr "enum " (#. this operator) "\n" tabstr "{\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (~ (#. arg (saveD (+ tab 1) null (#. this type))) (#? (< i (- (#. this arguments length) 1)) ",\n" "\n"))))
                                            (~= savestr (~ tabstr "}\n"))
                                            #break)
                                    "init".(#body
                                            (~= savestr (~ " = " (#. this operator)))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD (-#unary 1) null (#. this type)))))
                                            #break)
                                    ":".(#body
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD (-#unary 1) null (#. this type)))))
                                            (~= savestr (#. this type))
                                            #break)
                                    "*".(#body
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD (-#unary 1) null (#. this type)))))
                                            (~= savestr (#. this type))
                                            #break)
                                    "struct".(#body
                                            (~= savestr (~ tabstr "struct " (#. this operator) "\n" tabstr "{\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD (+ tab 1) null (#. this type)))))
                                            (~= savestr (~ tabstr "}\n"))
                                            #break)
                                    "class".(#body
                                            (~= savestr (~ tabstr "class " (#. this operator)))
                                            (#if
                                                (== (#. arguments (#[ 0) type) "superclass").(#body
                                                        (~= savestr (~ " : " (#. arguments (#[ 0) (saveD (-#unary 1) null (#. this type)))))))
                                            (~= savestr (~ "\n" tabstr "{\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (#if
                                                        (!= (#. arg type) "superclass").(#body
                                                                (~= savestr (#. arg (saveD (+ tab 1) null (#. this type)))))))
                                            (~= savestr (~ tabstr "}\n"))
                                            #break)
                                    "function".(#body
                                            (~= savestr (~ tabstr (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))) " " (#? (#. this operator empty) "function" (#. this operator)) "(")) (.
                                            a#var
                                            b#var
                                            c#var).([]#type long)
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (#foreach j arg2 (#. arg post_operations)).(#body
                                                            (#if
                                                                (> (#. arg2 app_args) 1).(#body
                                                                        (~= a (+ (- i (#. arg2 app_args)) 1))
                                                                        (~= b i)
                                                                        (~= c j)))))
                                            (getPost#function ([]#type Expression) (i long)).(#body
                                                    (e#var ([]#type Expression))
                                                    (#foreach j f a).(#body
                                                            (#if
                                                                (&& (>= i f) (< i (#. b (#[ j)))).(#body
                                                                        (~= e (#. this arguments (#[ (#. b (#[ j))) post_operations (#[ (#. c (#[ j))))))))
                                                    (#return e))
                                            (#if
                                                (> (#. this arguments length) 1).(#body
                                                        (~= savestr (#. this arguments (#[ 1) (saveD (-#unary 1) (getPost 1) (#. this type))))))
                                            (#if
                                                (> (#. this arguments length) 2).(#body
                                                        (#foreach i arg (#. this arguments (#[ 2 .. $))).(#body
                                                                (~= savestr (~ ", " (#. arg (saveD (-#unary 1) (getPost (+ i 2)) (#. this type))))))))
                                            (#if
                                                (!#unary (#. this post_operations empty)).(#body
                                                        (~= savestr ")\n")
                                                        (#foreach i arg (#. this post_operations)).(#body
                                                                (~= savestr (#. arg (saveD tab null (#. this type))))))
                                                (>= tab 0).(#body
                                                        (~= savestr ");\n"))
                                                #else.(#body
                                                        (~= savestr ")")))
                                            #break)
                                    "body".(#body
                                            (~= savestr (~ tabstr "{\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (#. arg (saveD (+ tab 1) null (#. this type)))))
                                            (~= savestr (~ tabstr "}\n"))
                                            #break) (.
                                    "return"
                                    "break"
                                    "continue"
                                    "goto").(#body
                                            (~= savestr (#. this type))
                                            (#if
                                                (!#unary (#. this arguments empty)).(#body
                                                        (~= savestr (~ " " (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type)))))
                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                (~= savestr (~ ", " (#. arg (saveD (-#unary 1) null (#. this type))))))))
                                            (#if
                                                (>= tab 0).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "for".(#body
                                            (~= savestr (~ tabstr (#. this type)))
                                            (~= savestr (~ " (" (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type)))))
                                            (~= savestr (~ "; " (#. this arguments (#[ 1) (saveD (-#unary 1) null (#. this type)))))
                                            (~= savestr (~ "; " (#. this arguments (#[ 2) (saveD (-#unary 1) null (#. this type))) ")\n"))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab))))
                                            #break)
                                    "while".(#body
                                            (~= savestr (~ tabstr (#. this type)))
                                            (~= savestr (~ " (" (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))) ")\n"))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab))))
                                            #break)
                                    "do".(#body
                                            (~= savestr (~ tabstr (#. this type) "\n"))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab))))
                                            (~= savestr (~ tabstr "while (" (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))) ");\n"))
                                            #break)
                                    "foreach".(#body
                                            (~= savestr (~ tabstr (#. this type) " ("))
                                            (#if
                                                (!#unary (#. this arguments (#[ 0) operator empty)).(#body
                                                        (~= savestr (~ (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))) ", "))))
                                            (~= savestr (~ (#. this arguments (#[ 1) (saveD (-#unary 1) null (#. this type))) "; "))
                                            (~= savestr (~ (#. this arguments (#[ 2) (saveD (-#unary 1) null (#. this type))) ")\n"))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab null (#. this type)))))
                                            #break)
                                    "if".(#body
                                            (~= savestr (~ tabstr "if (" (#? (!#unary (#. operator empty)) (~ operator " == ") "") (#. this arguments (#[ 0) (saveD tab null (#. this type)))))
                                            (= (or_need#var bool) (#. arguments (#[ 0) post_operations empty))
                                            (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                    (#if
                                                        (== (#. arg type) "else").(#body
                                                                (~= savestr (~ tabstr "else\n" (#. arg (saveD tab null "else"))))
                                                                (= or_need false))
                                                        or_need.(#body
                                                                (~= savestr (~ tabstr " || " (#? (!#unary (#. operator empty)) (~ operator " == ") "") (#. arg (saveD tab null (#. this type)))))
                                                                (= or_need (#. arg post_operations empty)))
                                                        #else.(#body
                                                                (~= savestr (~ tabstr "else if (" (#? (!#unary (#. operator empty)) (~ operator " == ") "") (#. arg (saveD tab null (#. this type)))))
                                                                (= or_need (#. arg post_operations empty)))))
                                            #break)
                                    "switch".(#body
                                            (~= savestr (~ tabstr "switch (" (#? (!#unary (#. operator empty)) operator inner) ")\n"))
                                            (~= savestr (~ tabstr "{\n"))
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (#if
                                                        (== (#. arg type) "default").(#body
                                                                (~= savestr (~ tabstr "    default" (#. arg (saveD (+ tab 1) null "case")))))
                                                        #else.(#body
                                                                (~= savestr (~ tabstr "    case " (#. arg (saveD (+ tab 1) null "case")))))))
                                            (~= savestr (~ tabstr "}\n"))
                                            #break)
                                    "var".(#body
                                            (#foreach i arg (#. this arguments)).(#body
                                                    (~= savestr (~ (#. arg (saveD (-#unary 1))) " ")))
                                            (= (poststr#var string) "")
                                            (#if
                                                (&& (!is parent null) (!#unary post) (> (#. parent arguments length) index)).(#body
                                                        (#foreach i arg (#. parent arguments (#[ index .. $))).(#body
                                                                (#foreach i2 arg2 (#. arg post_operations)).(#body
                                                                        (#if
                                                                            (== (+ (- (#. arg index) (#. arg2 app_args)) 1) (#. this index)).(#body
                                                                                    (#if
                                                                                        (== (#. arg2 operator) "[]").(#body
                                                                                                (= savestr (~ savestr (#. arg2 (saveD tab))))
                                                                                                (#foreach i3 arg3 (#. parent arguments (#[ (+ index 1) .. (+ (#. arg index) 1)))).(#body
                                                                                                        (~= poststr (~ ", " (#. arg3 (saveD (-#unary 1) null "ctype"))))))
                                                                                        (== (#. arg2 type) "init").(#body)
                                                                                        #else.(#body
                                                                                                (= savestr (~ (#. arg2 (saveD (-#unary 1))) " " savestr))
                                                                                                (#foreach i3 arg3 (#. parent arguments (#[ (+ index 1) .. (+ (#. arg index) 1)))).(#body
                                                                                                        (~= poststr (~ ", " (#. arg3 (saveD (-#unary 1) null "ctype"))))))))
                                                                            (&& (!= ptype "ctype") (<= (#. this index) (#. arg index)) (> (#. this index) (+ (- (#. arg index) (#. arg2 app_args)) 1))).(#body
                                                                                    (#return ""))))))
                                                #else.(#body
                                                        (#foreach i arg (#. this post_operations)).(#body
                                                                (#if
                                                                    (== (#. arg app_args) 1).(#body
                                                                            (#if
                                                                                (== (#. arg operator) "[]").(#body
                                                                                        (= savestr (~ savestr (#. arg (saveD tab)))))
                                                                                (== (#. arg type) "init").(#body)
                                                                                #else.(#body
                                                                                        (= savestr (~ (#. arg (saveD (-#unary 1))) " " savestr)))))))))
                                            (~= savestr (~ " " (#. this operator)))
                                            (#foreach i arg (~ post (#. this post_operations))).(#body
                                                    (#if
                                                        (== (#. arg app_args) 1).(#body
                                                                (#if
                                                                    (== (#. arg type) "init").(#body
                                                                            (= savestr (~ savestr (#. arg (saveD tab)))))))))
                                            (~= savestr poststr)
                                            (#if
                                                (>= tab 0).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "default".(#body
                                            (~= savestr ":\n")
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab null "op"))))
                                            #break)
                                    ".".(#body
                                            (#if
                                                (!#unary (#. arguments empty)).(#body
                                                        (~= savestr (#. this arguments (#[ 0) (saveD (-#unary 1) null "op")))
                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                (= (next#var auto) (#. arg (saveD (-#unary 1) null "op")))
                                                                (#if
                                                                    (== (#. next (#[ 0)) '[').(#body
                                                                            (~= savestr next))
                                                                    (== next "init").(#body
                                                                            (= savestr (~ "(" savestr ")" (#. this type) next)))
                                                                    #else.(#body
                                                                            (~= savestr (~ (#. this type) next)))))))
                                            (#if
                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                        (~= savestr ")\n"))
                                                (== ptype "case").(#body
                                                        (~= savestr ":\n")))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (#if
                                                        (== (#. arg type) "switch").(#body
                                                                (= savestr (#. arg (saveD tab null "op" savestr))))
                                                        #else.(#body
                                                                (~= savestr (#. arg (saveD tab null "op"))))))
                                            (#if
                                                (&& (!= ptype "if") (!= ptype "case") (>= tab 0) (#. this post_operations empty)).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "[".(#body
                                            (~= savestr "[")
                                            (#if
                                                (!#unary (#. arguments empty)).(#body
                                                        (~= savestr (#. this arguments (#[ 0) (saveD (-#unary 1) null "op")))
                                                        (= (sep#var string) ", ")
                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                (#if
                                                                    (== (#. arg operator) "..").(#body
                                                                            (= sep "")))
                                                                (~= savestr (~ sep (#. arg (saveD (-#unary 1) null "op")))))))
                                            (~= savestr "]")
                                            (#if
                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                        (~= savestr ")\n")))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab null "op"))))
                                            (#if
                                                (&& (!= ptype "if") (>= tab 0) (#. this post_operations empty)).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "\"".(#body
                                            (~= savestr (~ "\"" (#. this arguments (#[ 0) (saveD (-#unary 1) null "op"))))
                                            (= (sep#var string) " ")
                                            (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                    (~= savestr (~ sep (#. arg (saveD (-#unary 1) null "op")))))
                                            (~= savestr "\"")
                                            (#if
                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                        (~= savestr ")\n")))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (#. arg (saveD tab null "op"))))
                                            (#if
                                                (&& (!= ptype "if") (>= tab 0) (#. this post_operations empty)).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "new".(#body
                                            (~= savestr (#. this type))
                                            (#if
                                                (!#unary (#. this arguments empty)).(#body
                                                        (~= savestr (~ " " (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type)))))
                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                (~= savestr (~ ", " (#. arg (saveD (-#unary 1) null (#. this type))))))))
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (~= savestr (~ (#? (!= (#. arg operator) "[]") "." "") (#. arg (saveD (-#unary 1) null (#. this type))))))
                                            (#if
                                                (>= tab 0).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "cast".(#body
                                            (~= savestr (~ "(" (#. this type)))
                                            (#if
                                                (!#unary (#. this arguments empty)).(#body
                                                        (~= savestr (~ "(" (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type)))))
                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                (~= savestr (~ ") (" (#. arg (saveD (-#unary 1) null (#. this type))))))
                                                        (~= savestr "))")))
                                            (#if
                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                        (~= savestr ")\n"))
                                                (== ptype "case").(#body
                                                        (~= savestr ":\n")))
                                            (body_#var bool)
                                            (#foreach i arg (#. this post_operations)).(#body
                                                    (#if
                                                        (== (#. arg type) "body").(#body
                                                                (~= savestr (#. arg (saveD tab null (#. this type))))
                                                                (= body_ true))
                                                        (== (#. arg type) "switch").(#body
                                                                (= savestr (#. arg (saveD tab null "postop" savestr)))
                                                                (= body_ true))
                                                        #else.(#body
                                                                (~= savestr (~ (#? (!= (#. arg operator) "[]") "." "") (#. arg (saveD (-#unary 1) null (#. this type))))))))
                                            (#if
                                                (&& (!= ptype "if") (!= ptype "case") (>= tab 0) (!#unary body_)).(#body
                                                        (= savestr (~ tabstr savestr ";\n"))))
                                            #break)
                                    "noop".(#body
                                            (~= savestr "{}")
                                            (#if
                                                (>= tab 0).(#body
                                                        (= savestr (~ tabstr savestr "\n"))))
                                            #break)
                                    "?".(#body
                                            (#if
                                                (>= (#. arguments length) 3).(#body
                                                        (~= savestr (~ "(" (#. arguments (#[ 0) (saveD (-#unary 1) null "op")) " ? " (#. arguments (#[ 1) (saveD (-#unary 1) null "op")) " : " (#. arguments (#[ 2) (saveD (-#unary 1) null "op")) ")"))))
                                            #break)
                                    #default.(#body
                                            (#. this operator).(#switch (.
                                                    "+"
                                                    "-"
                                                    "*"
                                                    "/"
                                                    "^"
                                                    "^^"
                                                    "~"
                                                    "%"
                                                    "&"
                                                    "&&"
                                                    "|"
                                                    "||"
                                                    "="
                                                    "+="
                                                    "-="
                                                    "*="
                                                    "/="
                                                    "~="
                                                    "=="
                                                    "!="
                                                    "<"
                                                    ">"
                                                    "<="
                                                    ">="
                                                    "is"
                                                    "!is"
                                                    "in"
                                                    "!in").(#body
                                                            (#if
                                                                (!#unary (#. arguments empty)).(#body
                                                                        (#if
                                                                            (== type "unary").(#body
                                                                                    (~= savestr (#. this operator))))
                                                                        (~= savestr (#. this arguments (#[ 0) (saveD (-#unary 1) null (#? (&& (== (#. this operator) "=") (!= (#. arguments (#[ 0) type) "unary")) "var" "op"))))
                                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                                (~= savestr (~ " " (#. this operator) " " (#. arg (saveD (-#unary 1) null "op")))))
                                                                        (#if
                                                                            (== type "type").(#body
                                                                                    (~= savestr (#. this operator))))))
                                                            (#if
                                                                (&& (!#unary (&& (>= tab 0) (#. this post_operations empty))) (== ptype "op")).(#body
                                                                        (= savestr (~ "(" savestr ")"))))
                                                            (#if
                                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                                        (~= savestr ")\n")))
                                                            (#foreach i arg (#. this post_operations)).(#body
                                                                    (#if
                                                                        (== (#. arg type) "switch").(#body
                                                                                (= savestr (#. arg (saveD tab null "postop" savestr))))
                                                                        #else.(#body
                                                                                (~= savestr (#. arg (saveD tab null "postop"))))))
                                                            (#if
                                                                (&& (!= ptype "if") (>= tab 0) (#. this post_operations empty)).(#body
                                                                        (= savestr (~ tabstr savestr ";\n"))))
                                                            #break) (.
                                                    "++"
                                                    "--").(#body
                                                            (#if
                                                                (== type "post").(#body
                                                                        (= savestr (~ (#. arguments (#[ 0) (saveD (-#unary 1) null "op")) operator)))
                                                                #else.(#body
                                                                        (= savestr (~ operator (#. arguments (#[ 0) (saveD (-#unary 1) null "op"))))))
                                                            (#if
                                                                (&& (!= ptype "if") (>= tab 0) (#. this post_operations empty)).(#body
                                                                        (= savestr (~ tabstr savestr ";\n"))))
                                                            #break)
                                                    "!".(#body
                                                            (~= savestr (#. this operator))
                                                            (#if
                                                                (!#unary (#. arguments empty)).(#body
                                                                        (~= savestr (~ " " (#. this arguments (#[ 0) (saveD (-#unary 1) null "op"))))))
                                                            (#if
                                                                (&& (!#unary (&& (>= tab 0) (#. this post_operations empty))) (== ptype "op")).(#body
                                                                        (= savestr (~ "(" savestr ")"))))
                                                            (#if
                                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                                        (~= savestr ")\n")))
                                                            (#foreach i arg (#. this post_operations)).(#body
                                                                    (#if
                                                                        (== (#. arg type) "switch").(#body
                                                                                (= savestr (#. arg (saveD tab null "postop" savestr))))
                                                                        #else.(#body
                                                                                (~= savestr (#. arg (saveD tab null "postop"))))))
                                                            (#if
                                                                (&& (!= ptype "if") (>= tab 0) (#. this post_operations empty)).(#body
                                                                        (= savestr (~ tabstr savestr ";\n"))))
                                                            #break)
                                                    "[]".(#body
                                                            (#if
                                                                (!#unary (#. this arguments empty)).(#body
                                                                        (~= savestr (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))))
                                                                        (#if
                                                                            (== type "type").(#body
                                                                                    (= (of#var string) "")
                                                                                    (#if
                                                                                        (>= (#. this arguments length) 2).(#body
                                                                                                (= of (#. this arguments (#[ 1) (saveD (-#unary 1) null (#. this type))))))
                                                                                    (~= savestr (~ "[" of "]")))
                                                                            #else.(#body
                                                                                    (= (sep#var string) ", ")
                                                                                    (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                                            (#if
                                                                                                (== (#. arg operator) "..").(#body
                                                                                                        (= sep "")))
                                                                                            (~= savestr (~ sep (#. arg (saveD (-#unary 1) null (#. this type))))))))))
                                                            (#if
                                                                (!= type "type").(#body
                                                                        (= savestr (~ "[" savestr "]"))))
                                                            (#foreach i arg (#. this post_operations)).(#body
                                                                    (#if
                                                                        (== (#. arg type) "switch").(#body
                                                                                (= savestr (#. arg (saveD tab null "postop" savestr))))
                                                                        (== type "type").(#body
                                                                                (= savestr (~ (#. arg (saveD tab null "op")) " " savestr)))
                                                                        #else.(#body
                                                                                (~= savestr (#. arg (saveD tab null "postop"))))))
                                                            #break) (.
                                                    "false"
                                                    "true").(#body
                                                            (~= savestr (#. this operator))
                                                            (#if
                                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                                        (~= savestr ")\n")))
                                                            (#foreach i arg (#. this post_operations)).(#body
                                                                    (#if
                                                                        (== (#. arg type) "switch").(#body
                                                                                (= savestr (#. arg (saveD tab null "postop" savestr))))
                                                                        #else.(#body
                                                                                (~= savestr (#. arg (saveD tab null "postop"))))))
                                                            #break)
                                                    #default.(#body
                                                            (#if
                                                                (== ptype "postop").(#body
                                                                        (~= savestr ".")))
                                                            (~= savestr (#. this operator))
                                                            (#if
                                                                (!#unary (#. this arguments empty)).(#body
                                                                        (= (first#var bool) true)
                                                                        (= (f#var auto) (#. this arguments (#[ 0) (saveD (-#unary 1) null (#. this type))))
                                                                        (#if
                                                                            (== f "!").(#body
                                                                                    (~= savestr "!("))
                                                                            #else.(#body
                                                                                    (~= savestr (~ "(" f))
                                                                                    (= first false)))
                                                                        (#foreach i arg (#. this arguments (#[ 1 .. $))).(#body
                                                                                (#if
                                                                                    (== (#. arg type) "!").(#body
                                                                                            (#if
                                                                                                (< (+ i 2) (#. arguments length)).(#body
                                                                                                        (= first false)
                                                                                                        (~= savestr ")(")))
                                                                                            #continue)
                                                                                    first.(#body
                                                                                            (= first false))
                                                                                    #else.(#body
                                                                                            (~= savestr ", ")))
                                                                                (~= savestr (#. arg (saveD (-#unary 1) null (#. this type)))))
                                                                        (~= savestr ")")))
                                                            (#if
                                                                (&& (== ptype "if") (!#unary (#. this post_operations empty))).(#body
                                                                        (~= savestr ")\n"))
                                                                (== ptype "case").(#body
                                                                        (~= savestr ":\n")))
                                                            (body_#var bool)
                                                            (#foreach i arg (#. this post_operations)).(#body
                                                                    (#if
                                                                        (== (#. arg type) "body").(#body
                                                                                (~= savestr (#. arg (saveD tab null (#. this type))))
                                                                                (= body_ true))
                                                                        (== (#. arg type) "switch").(#body
                                                                                (= savestr (#. arg (saveD tab null "postop" savestr)))
                                                                                (= body_ true))
                                                                        (== ptype "foreach").(#body
                                                                                (= savestr (~ (#. arg (saveD (-#unary 1) null (#. this type))) " " savestr)))
                                                                        #else.(#body
                                                                                (~= savestr (~ (#? (!= (#. arg operator) "[]") "." "") (#. arg (saveD (-#unary 1) null (#. this type))))))))
                                                            (#if
                                                                (&& (!= ptype "if") (!= ptype "case") (>= tab 0) (!#unary body_)).(#body
                                                                        (= savestr (~ tabstr savestr ";\n"))))
                                                            #break))
                                            #break))))
                (#if
                    (&& (!= type "module") (!#unary (#. this label empty))).(#body
                            (= savestr (~ tabstr (#. this label) ":\n" savestr))))
                (#return savestr))
        (findBlocks#function void (code Expression ref) (lexemTypes Expression ref) (lexer Expression ref)).(#body
                (#if
                    (== type "code").(#body
                            (= code this))
                    (&& (== type "enum") (== operator "LexemType")).(#body
                            (= lexemTypes this))
                    (&& (== type "struct") (== operator "Lexer")).(#body
                            (= lexer this)))
                (#if
                    (&& (!is code null) (!is lexemTypes null) (!is lexer null)).(#body
                            #return))
                (#foreach . arg arguments).(#body
                        (#. arg (findBlocks code lexemTypes lexer)))
                (#foreach . arg post_operations).(#body
                        (#. arg (findBlocks code lexemTypes lexer))))
        (replace#function void (ne Expression)).(#body
                (= (#. ne parent) (#. this parent))
                (= (#. ne index) (#. this index))
                (= (#. ne post) (#. this post))
                (= (#. ne x) (#. this x))
                (= (#. ne y) (#. this y))
                (= (#. ne r1) (#. this r1))
                (= (#. ne r2) (#. this r2))
                (= (#. ne center) (#. this center))
                (#if
                    (!is (#. this parent) null).(#body
                            (#if
                                (!#unary (#. this post)).(#body
                                        (= (#. this parent arguments (#[ (#. this index))) ne))
                                #else.(#body
                                        (= (#. this parent post_operations (#[ (#. this index))) ne))))))
        (addAfter#function void (ne Expression)).(#body
                (= (#. ne parent) (#. this parent))
                (= (#. ne index) (+ (#. this index) 1))
                (= (#. ne x) (#. this x))
                (= (#. ne y) (#. this y))
                (= (#. ne r1) (#. this r1))
                (= (#. ne r2) (#. this r2))
                (= (#. ne center) (#. this center))
                (#foreach . arg (#. this parent arguments (#[ (+ (#. this index) 1) .. $))).(#body
                        (++#post (#. arg index)))
                (= (#. this parent arguments) (~ (#. this parent arguments (#[ 0 .. (+ (#. this index) 1))) ne (#. this parent arguments (#[ (+ (#. this index) 1) .. $)))))
        (toLexer#function void (code Expression) (main bool)).(#body
                (#if
                    (== operator "save").(#body
                            (= (ne#var Expression) (#new (Expression (~ "(=" (#? (!#unary (#. label empty)) (~ "@" label) "") (#. " back2 this)" dup)))))
                            (#. code (addChild ne)))
                    (== operator "back").(#body
                            (= (ne#var Expression) (#new (Expression (~ "(=" (#? (!#unary (#. label empty)) (~ "@" label) "") (#. " this back2)" dup)))))
                            (#. code (addChild ne)))
                    (== type "switch").(#body
                            (= (ne#var Expression) (#new (Expression (~ "(=" (#? (!#unary (#. label empty)) (~ "@" label) "") (#. " back this)" dup)))))
                            (#. code (addChild ne))
                            (= ne (#new (Expression (#. "(nextChr)" dup))))
                            (#. code (addChild ne))
                            (= ne (#new (Expression (#. "(#if)" dup))))
                            (#. code (addChild ne))
                            (= code ne))
                    (== (#. parent type) "switch").(#body
                            (ne#var Expression)
                            (#if
                                (#. operator (startsWith "is")).(#body
                                        (= ne (#new (Expression (~ "(#module (#. chr " operator (#. ").(#body))" dup)))))
                                        (= ne (#. ne arguments (#[ 0))))
                                (&& (== operator "!") (#. arguments (#[ 0) operator (startsWith "is"))).(#body
                                        (= ne (#new (Expression (~ "(#module (! (#. chr " (#. arguments (#[ 0) operator) (#. ")).(#body))" dup)))))
                                        (= ne (#. ne arguments (#[ 0))))
                                (|| (&& (> (#. operator length) 2) (== (#. operator (#[ 0)) '\'') (== (#. operator (#[ (- $ 1))) '\'')) (== operator "EOF")).(#body
                                        (= ne (#new (Expression (~ "(#module (== chr " operator (#. ").(#body))" dup)))))
                                        (= ne (#. ne arguments (#[ 0))))
                                (&& (> (#. operator length) 2) (== (#. operator (#[ 0)) '"') (== (#. operator (#[ (- $ 1))) '"')).(#body
                                        (= ne (#new (Expression (~ "(#module (! (#. " operator (#. " (find chr) empty)).(#body))" dup)))))
                                        (= ne (#. ne arguments (#[ 0))))
                                (== type "\"").(#body
                                        (= ne (#new (Expression (#. "(#module (! (#. replace_this (find chr) empty)).(#body))" dup))))
                                        (= ne (#. ne arguments (#[ 0)))
                                        (= (dc#var auto) (#. this deepcopy))
                                        (#. ne arguments (#[ 0) arguments (#[ 0) (replace dc))
                                        (= (#. dc post_operations) null))
                                (== type "default").(#body
                                        (= ne (#new (Expression (#. "(#module (true).(#body (= this back)))" dup))))
                                        (= ne (#. ne arguments (#[ 0))))
                                #else.(#body
                                        (writefln "%s#%s" operator type)
                                        (assert 0)))
                            (#if
                                (&& (#. post_operations empty) (|| (#. code arguments empty) (!= (#. code arguments (#[ (- $ 1)) operator) "||") (!#unary (#. code arguments (#[ (- $ 1)) post_operations (#[ 0) arguments empty)))).(#body
                                        (= (ne2#var Expression) (#new (Expression (#. "(#module (||).(#body))" dup))))
                                        (= ne2 (#. ne2 arguments (#[ 0)))
                                        (= (#. ne post_operations) null)
                                        (#. ne2 (addChild ne))
                                        (#. code (addChild ne2)))
                                (&& (!#unary (#. code arguments empty)) (== (#. code arguments (#[ (- $ 1)) operator) "||") (#. code arguments (#[ (- $ 1)) post_operations (#[ 0) arguments empty)).(#body
                                        (= (co#var auto) (#. code arguments (#[ (- $ 1))))
                                        (= (#. ne post_operations) null)
                                        (#. co (addChild ne))
                                        (#if
                                            (!#unary (#. post_operations empty)).(#body
                                                    (= code (#. co post_operations (#[ 0))))))
                                #else.(#body
                                        (#. code (addChild ne))
                                        (= code (#. ne post_operations (#[ 0))))))
                    (== type "while").(#body
                            (ne#var Expression)
                            (= (back#var Expression) (#new (Expression (#. "(= this back)" dup))))
                            (#if
                                (<= (#. arguments length) 1).(#body
                                        (#if
                                            (== (#. arguments (#[ 0) operator) "!").(#body
                                                    (= ne (#new (Expression (#. (~ "(#module (#do" (#? (!#unary (#. label empty)) (~ "@" label) "") " !).(#body (= back this) nextChr))") dup))))
                                                    (= ne (#. ne arguments (#[ 0)))
                                                    (#. code (addChild ne))
                                                    (#. code (addChild back))
                                                    (= code (#. ne arguments (#[ 0))))
                                            #else.(#body
                                                    (= ne (#new (Expression (#. "(#module (#do).(#body (= back this) nextChr))" dup))))
                                                    (= ne (#. ne arguments (#[ 0)))
                                                    (#. code (addChild ne))
                                                    (#. code (addChild back))
                                                    (= code ne))))
                                #else.(#body
                                        (= ne (#new (Expression (#. "(#module (#do ||).(#body (= back this) nextChr))" dup))))
                                        (= ne (#. ne arguments (#[ 0)))
                                        (#. code (addChild ne))
                                        (#. code (addChild back))
                                        (= code (#. ne arguments (#[ 0))))))
                    (|| (&& (== (#. parent type) "while") (!= operator "!")) (&& (|| (== (#. parent operator) "||") (== (#. parent operator) "!")) (== (#. parent parent type) "while"))).(#body
                            (ne#var Expression)
                            (#if
                                (#. operator (startsWith "is")).(#body
                                        (= ne (#new (Expression (~ "(#. chr " operator (#. ")" dup))))))
                                (|| (&& (> (#. operator length) 2) (== (#. operator (#[ 0)) '\'') (== (#. operator (#[ (- $ 1))) '\'')) (== operator "EOF")).(#body
                                        (= ne (#new (Expression (~ "(== chr " operator (#. ")" dup))))))
                                (&& (> (#. operator length) 2) (== (#. operator (#[ 0)) '"') (== (#. operator (#[ (- $ 1))) '"')).(#body
                                        (= ne (#new (Expression (~ "(! (#. " operator (#. " (find chr) empty))" dup))))))
                                (== type "\"").(#body
                                        (= ne (#new (Expression (#. "(! (#. replace_this (find chr) empty))" dup))))
                                        (= (dc#var auto) (#. this deepcopy))
                                        (#. ne arguments (#[ 0) arguments (#[ 0) (replace dc))
                                        (= (#. dc post_operations) null))
                                #else.(#body
                                        (writefln "%s#%s" operator type)
                                        (assert 0)))
                            (#. code (addChild ne)))
                    (== (#. parent type) "goto").(#body
                            (= (ne#var Expression) (#new (Expression (~ "(#goto " operator (#. ")" dup)))))
                            (#. code (addChild ne)))
                    (== (#. parent type) "return").(#body
                            (ne#var Expression)
                            (#if
                                main.(#body
                                        (= ne (#new (Expression (~ "(= type (#. LexemType " operator (#. "))" dup)))))
                                        (#. code (addChild ne))))
                            (= ne (#new (Expression (#. "(#return)" dup))))
                            (#. code (addChild ne))))
                (#foreach . arg arguments).(#body
                        (#. arg (toLexer code main)))
                (#foreach . arg post_operations).(#body
                        (#. arg (toLexer code main))))
        (toLexer#function void (code Expression) (lexer Expression) (lTypes ([]#type bool string) ref)).(#body
                (#if
                    (&& (== type "return") (> (#. arguments length) 0)).(#body
                            (= (#. lTypes (#[ (#. arguments (#[ 0) operator))) true)))
                (#if
                    (== type "function").(#body
                            (#if
                                (== operator "Start").(#body
                                        (= (main#var Expression) (#new Expression))
                                        (#foreach . arg post_operations).(#body
                                                (#. arg (toLexer main true)))
                                        (#if
                                            (!#unary (#. main arguments empty)).(#body
                                                    (#. code (replace (#. main arguments (#[ 0))))
                                                    (#foreach . arg (#. main arguments (#[ 1 .. $))).(#body
                                                            (#. code (addAfter arg))
                                                            (= code arg)))))
                                #else.(#body
                                        (= (func#var Expression) (#new (Expression (#. (~ "(#module (" operator "#function void).(#body (back#var Lexer) (back2#var Lexer)))") dup))))
                                        (= func (#. func arguments (#[ 0)))
                                        (#foreach . arg post_operations).(#body
                                                (#. arg (toLexer (#. func post_operations (#[ 0)) false)))
                                        (#. lexer (addChild func))))))
                (#foreach . arg arguments).(#body
                        (#. arg (toLexer code lexer lTypes)))
                (#foreach . arg post_operations).(#body
                        (#. arg (toLexer code lexer lTypes))))
        (toLexer#function Expression).(#body (.
                code#var
                lexemTypes#var
                lexer#var).(Expression)
                (= (ret#var Expression) (#new (Expression (readFile "lexer_templ.np"))))
                (#. ret (findBlocks code lexemTypes lexer))
                (assert (!is lexemTypes null))
                (assert (!is code null))
                (= (#. ret operator) "lexer_synth")
                (= (lTypes#var ([]#type bool string)) (#. (#. bool (#[ string)) init))
                (toLexer code lexer lTypes)
                (#foreach ltype _ lTypes).(#body
                        (= (ne#var auto) (#new Expression))
                        (= (#. ne operator) ltype)
                        (#. lexemTypes (addChild ne)))
                (#return ret))
        (readFile#function ([]#type char).(static) (filename string)).(#body
                (= (file#var auto) (File filename))
                (mod#var ([]#type char))
                (#foreach . line (#. file byLine)).(#body
                        (= line (strip line))
                        (#if
                            (&& (!#unary (#. mod empty)) (!= (#. mod (#[ (- $ 1))) ' ')).(#body
                                    (~= mod ' ')))
                        (#if
                            (== line ".").(#body
                                    (= line (#. ". " dup))))
                        (~= mod line))
                (#return mod))
        (deepcopy#function Expression).(#body
                (= (copy#var Expression) (#new Expression))
                (= (#. copy operator) operator)
                (= (#. copy type) type)
                (= (#. copy label) label)
                (= (#. copy app_args) app_args)
                (= (#. copy parent) parent)
                (= (#. copy index) index)
                (= (#. copy post) post)
                (= (#. copy center) center)
                (= (#. copy hidden) hidden)
                (= (#. copy level) level)
                (= (#. copy levels) levels)
                (= (#. copy x) x)
                (= (#. copy y) y)
                (= (#. copy r1) r1)
                (= (#. copy r2) r2)
                (= (#. copy r3) r3)
                (= (#. copy a1) a1)
                (= (#. copy a2) a2)
                (#foreach . arg arguments).(#body
                        (~= (#. copy arguments) (#. arg deepcopy))
                        (= (#. copy arguments (#[ (- $ 1)) parent) copy))
                (#foreach . arg post_operations).(#body
                        (~= (#. copy post_operations) (#. arg deepcopy))
                        (= (#. copy post_operations (#[ (- $ 1)) parent) copy))
                (#return copy))
        (movecopy#function Expression).(#body
                (= (copy#var auto) deepcopy)
                (++#post (#. copy index))
                (#if
                    (!#unary post).(#body
                            (#foreach . arg (#. parent arguments (#[ (+ index 1) .. $))).(#body
                                    (++#post (#. arg index)))
                            (= (#. parent arguments) (~ (#. parent arguments (#[ 0 .. (+ index 1))) copy (#. parent arguments (#[ (+ index 1) .. $)))))
                    #else.(#body
                            (#foreach . arg (#. parent post_operations (#[ (+ index 1) .. $))).(#body
                                    (++#post (#. arg index)))
                            (= (#. parent post_operations) (~ (#. parent post_operations (#[ 0 .. (+ index 1))) copy (#. parent post_operations (#[ (+ index 1) .. $))))))
                (#return copy))
        (toString#function string.(override)).(#body
                (#return (~ operator (#? (!#unary (#. type empty)) (~ "#" type) "") (#? (!#unary (#. label empty)) (~ "@" label) ""))))))
